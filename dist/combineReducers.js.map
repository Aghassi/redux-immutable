{"version":3,"sources":["combineReducers.js"],"names":[],"mappings":";;;;;;;;sBAAc,QAAQ;;;;yBAEA,WAAW;;;;yBAI1B,WAAW;;AAElB,IAAI,QAAQ,YAAA;IACR,WAAW,YAAA;IACX,WAAW,YAAA,CAAC;;;;;;AAMhB,WAAW,GAAG,UAAC,GAAG,EAAK;AACnB,WAAO,oBAAE,KAAK,CAAC,GAAG,EAAE,oBAAE,aAAa,CAAC,CAAC;CACxC,CAAC;;;;;;AAMF,WAAW,GAAG,UAAC,GAAG,EAAK;AACnB,WAAO,oBAAE,KAAK,CAAC,GAAG,EAAE,oBAAE,UAAU,CAAC,CAAC;CACrC,CAAC;;;;;;;;;AASF,QAAQ,GAAG,UAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAK;AAC/C,QAAI,CAAC,uBAAU,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;AACxC,cAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;KACxE;;;;AAID,wBAAE,OAAO,CAAC,UAAU,EAAE,UAAC,KAAK,EAAE,UAAU,EAAK;;;AAGzC,YAAI,WAAW,CAAC,KAAK,CAAC,EAAE;;;AAGpB,gBAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;AACpB,oBAAI,MAAM,YAAA,CAAC;;AAEX,sBAAM,CAAC,eAAe,GAAG,IAAI,CAAC;;AAE9B,sBAAM,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC;;AAE5D,oBAAI,CAAC,uBAAU,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;AACxC,0BAAM,IAAI,KAAK,CAAC,0DAA0D,GAAG,UAAU,GAAG,YAAY,GAAG,MAAM,CAAC,IAAI,GAAG,8BAA8B,GAAG,OAAO,MAAM,GAAG,IAAI,CAAC,CAAC;iBACjL;;AAED,sBAAM,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;aAC3C;SACJ,MAAM,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;AAC3B,kBAAM,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAA;SAC3F;KACJ,CAAC,CAAC;;AAEH,WAAO,MAAM,CAAC;CACjB,CAAC;;;;;;qBAKa,UAAC,OAAO,EAAK;AACxB,mBArEA,eAAe,EAqEC,OAAO,CAAC,CAAC;;AAEzB,WAAO,UAAC,KAAK,EAAE,MAAM,EAAK;AACtB,YAAI,MAAM,YAAA,CAAC;;AAEX,YAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAChD,mBAAO,CAAC,IAAI,CAAC,2BAA2B,GAAG,MAAM,CAAC,IAAI,GAAG,gIAAgI,CAAC,CAAC;;AAE3L,mBAAO,KAAK,CAAC;SAChB;;AAED,uBA/EJ,cAAc,EA+EK,MAAM,CAAC,CAAC;;;;AAIvB,cAAM,GAAG;AACL,2BAAe,EAAE,KAAK;SACzB,CAAC;;AAEF,aAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;;AAEjD,YAAI,CAAC,MAAM,CAAC,eAAe,EAAE;AACzB,mBAAO,CAAC,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC;SACnE;;AAED,eAAO,KAAK,CAAC;KAChB,CAAC;CACL","file":"combineReducers.js","sourcesContent":["import _ from 'lodash';\n\nimport Immutable from 'immutable';\nimport {\n    validateReducer,\n    validateAction\n} from 'canonical';\n\nlet iterator,\n    isDomainMap,\n    isActionMap;\n\n/**\n * @param {Object.<string, Object>} map\n * @return {Boolean} If every object property value is a plain object.\n */\nisDomainMap = (map) => {\n    return _.every(map, _.isPlainObject);\n};\n\n/**\n * @param {Object.<string, Function>} map\n * @return {Boolean} If every object property value is a function.\n */\nisActionMap = (map) => {\n    return _.every(map, _.isFunction);\n};\n\n/**\n * @param {Object} domain\n * @param {Object} action\n * @param {String} action.name\n * @param {Object} collection\n * @return {Object} domain\n */\niterator = (domain, action, collection, tapper) => {\n    if (!Immutable.Iterable.isIterable(domain)) {\n        throw new Error('Domain must be an instance of Immutable.Iterable.');\n    }\n\n    // console.log('domain', domain, 'action', action, 'definition', collection);\n\n    _.forEach(collection, (value, domainName) => {\n        // console.log('value', value, 'domain', domainName, 'isActionMap', isActionMap(value), 'isDomainMap', isDomainMap(value));\n\n        if (isActionMap(value)) {\n            // console.log('action.name', action.name, 'value[action.name]', typeof value[action.name]);\n\n            if (value[action.name]) {\n                let result;\n\n                tapper.isActionHandled = true;\n\n                result = value[action.name](domain.get(domainName), action);\n\n                if (!Immutable.Iterable.isIterable(result)) {\n                    throw new Error('Reducer must return an instance of Immutable.Iterable. \"' + domainName + '\" domain \"' + action.name + '\" action handler result is \"' + typeof result + '\".');\n                }\n\n                domain = domain.set(domainName, result);\n            }\n        } else if (isDomainMap(value)) {\n            domain = domain.set(domainName, iterator(domain.get(domainName), action, value, tapper))\n        }\n    });\n\n    return domain;\n};\n\n/**\n * @param {Object} reducer\n */\nexport default (reducer) => {\n    validateReducer(reducer);\n\n    return (state, action) => {\n        let tapper;\n\n        if (action.type && action.type.indexOf('@@') === 0) {\n            console.info('Ignoring private action \"' + action.type + '\". redux-immutable does not support state inflation. Refer to https://github.com/gajus/canonical-reducer-composition/issues/1.');\n\n            return state;\n        }\n\n        validateAction(action);\n\n        // Tapper is an object that tracks execution of the action.\n        // @todo Make this an opt-in.\n        tapper = {\n            isActionHandled: false\n        };\n\n        state = iterator(state, action, reducer, tapper);\n\n        if (!tapper.isActionHandled) {\n            console.warn('Unhandled action \"' + action.name + '\".', action);\n        }\n\n        return state;\n    };\n};\n"],"sourceRoot":"/source/"}