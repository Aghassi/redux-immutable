{"version":3,"sources":["combineReducers.js"],"names":[],"mappings":"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","file":"combineReducers.js","sourcesContent":["import _ from 'lodash';\n\nimport Immutable from 'immutable';\nimport {\n    validateReducer,\n    validateAction\n} from 'canonical';\n\nlet isActionMap,\n    isDomainMap,\n    iterator;\n\n/**\n * @param {Object.<string, Object>} map\n * @return {Boolean} If every object property value is a plain object.\n */\nisDomainMap = (map) => {\n    return _.every(map, _.isPlainObject);\n};\n\n/**\n * @param {Object.<string, Function>} map\n * @return {Boolean} If every object property value is a function.\n */\nisActionMap = (map) => {\n    return _.every(map, _.isFunction);\n};\n\n/**\n * @param {Object} domain\n * @param {Object} action\n * @param {String} action.name\n * @param {Object} collection\n * @param {Object} tapper\n * @return {Object}\n */\niterator = (domain, action, collection, tapper) => {\n    let newDomain;\n\n    if (!Immutable.Iterable.isIterable(domain)) {\n        throw new Error(`Domain must be an instance of Immutable.Iterable.`);\n    }\n\n    newDomain = domain;\n\n    // console.log(`domain`, domain, `action`, action, `definition`, collection);\n\n    _.forEach(collection, (value, domainName) => {\n        // console.log(`value`, value, `domain`, domainName, `isActionMap`, isActionMap(value), `isDomainMap`, isDomainMap(value));\n\n        if (isActionMap(value)) {\n            // console.log(`action.name`, action.name, `value[action.name]`, typeof value[action.name]);\n\n            if (value[action.name]) {\n                let result;\n\n                tapper.isActionHandled = true;\n\n                result = value[action.name](newDomain.get(domainName), action);\n\n                if (!Immutable.Iterable.isIterable(result)) {\n                    throw new Error(`Reducer must return an instance of Immutable.Iterable. \"${domainName}\" domain \"${action.name}\" action handler result is \"${typeof result}\".`);\n                }\n\n                newDomain = newDomain.set(domainName, result);\n            }\n        } else if (isDomainMap(value)) {\n            newDomain = newDomain.set(domainName, iterator(newDomain.get(domainName), action, value, tapper));\n        }\n    });\n\n    return newDomain;\n};\n\n/**\n * @param {Object} reducer\n * @return {Function}\n */\nexport default (reducer) => {\n    validateReducer(reducer);\n\n    /**\n     * @param {Immutable.Iterable} state\n     * @param {Object|undefined} action\n     * @return {Immutable.Iterable}\n     */\n    return (state, action) => {\n        let newState,\n            sanitizedAction,\n            tapper;\n\n        if (action) {\n            if (action.type && action.type.indexOf(`@@`) === 0) {\n                console.info(`Ignoring private action \"${action.type}\". redux-immutable does not support state inflation. Refer to https://github.com/gajus/canonical-reducer-composition/issues/1.`);\n\n                return state;\n            }\n\n            if (action.name === `CONSTRUCT`) {\n                throw new Error(`CONSTRUCT is a reserved action name.`);\n            }\n\n            validateAction(action);\n\n            sanitizedAction = action;\n        } else {\n            sanitizedAction = {\n                name: `CONSTRUCT`\n            };\n        }\n\n        // Tapper is an object that tracks execution of the action.\n        // @todo Make this an opt-in.\n        tapper = {\n            isActionHandled: false\n        };\n\n        newState = iterator(state, sanitizedAction, reducer, tapper);\n\n        if (!tapper.isActionHandled && sanitizedAction.name !== `CONSTRUCT`) {\n            console.warn(`Unhandled action \"${sanitizedAction.name}\".`, sanitizedAction);\n        }\n\n        // console.log(`sanitizedAction`, sanitizedAction, `tapper`, tapper);\n\n        return newState;\n    };\n};\n"],"sourceRoot":"/source/"}